// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//Defining the relationship between the tables for better understanding
//Competition Model has a one-to-many relationship with Division Model
//Division Model has a one-to-many relationship with Teams Model
//Teams Model has a one-to-many relationship with Player Model


//Competition Model
model Competition {
  id        Int        @id @default(autoincrement())
  name      String
  divisions Division[] // Relation to Division
  rules     Rules[]    // Relation to Rules
}

//Division Model
model Division {
  id            Int        @id @default(autoincrement())
  competitionId Int
  name          String
  competition   Competition @relation(fields: [competitionId], references: [id])
  teams         Teams[]     // Relation to Teams
  rules         Rules[]     // Relation to Rules
}

//Teams Model
model Teams {
  id         Int       @id @default(autoincrement())
  divisionId Int
  name       String
  division   Division  @relation(fields: [divisionId], references: [id])
  players    Player[]  // Relation to Player
}

//Player Model
model Player {
  id      Int    @id @default(autoincrement())
  teamId  Int
  name    String
  team    Teams  @relation(fields: [teamId], references: [id])
}

//Rules Model
model Rules {
  id           Int           @id @default(autoincrement())
  competitionId Int
  divisionId   Int?
  competition  Competition   @relation(fields: [competitionId], references: [id])
  division     Division?      @relation(fields: [divisionId], references: [id]) // Division is optional
  borrowerInfo BorrowerInfo? // Relation to BorrowerInfo
  finalEligibility FinalEligibility? // Relation to FinalEligibility
}

//BorrowerInfo Model
model BorrowerInfo {
  id         Int     @id @default(autoincrement())
  rulesId    Int @unique
  borrower   Boolean
  selected   Json   // JSON field for storing selected divisions
  applyTo    Json   // JSON field for storing apply_to divisions
  rules      Rules   @relation(fields: [rulesId], references: [id])
}

//FinalEligibility Model
model FinalEligibility {
  id             Int     @id @default(autoincrement())
  rulesId        Int @unique
  enabled        Boolean
  division       Json   // JSON field for storing divisions
  borrowedPlayers Boolean
  starredMatches Boolean
  rounds         Json   // JSON field for storing rounds
  rules          Rules   @relation(fields: [rulesId], references: [id])
}

